<?php
namespace NYPL\Services\Test;

use NYPL\Services\JobService;
use NYPL\Services\Model\RefileRequest\RefileRequest;
use PHPUnit\Framework\TestCase;
use Ramsey\Uuid\Uuid;

class JobServiceTest extends TestCase
{
    public $fakeJobService;

    public function setUp()
    {
        $this->fakeJobService = new class extends JobService {

            public static function generateJobId(bool $useJobManager = true): string
            {
                if ($useJobManager) {
                    $serviceId = (string) uniqid();
                } else {
                    $serviceId = Uuid::uuid4();
                }

                return $serviceId;
            }

            public static function buildJobNotice(array $data, $notice = '')
            {
                parent::buildJobNotice($data, $notice); // TODO: Change the autogenerated stub
            }

            public static function beginJob(RefileRequest $refileRequest, $message = '')
            {
                parent::initializeJobClient();
                parent::buildJobNotice((array)$refileRequest, $message);
                parent::getJobStatus()->setNotice(parent::getJobNotice());
            }

            public static function finishJob(RefileRequest $refileRequest)
            {
                parent::initializeJobClient();
                $data = (array)$refileRequest;

                parent::buildJobNotice($data, parent::JOB_SUCCESS_MESSAGE . ' (RefileID: ' . $refileRequest->getId() . ')');
                parent::getJobStatusSuccess()->setNotice(parent::getJobNotice());
            }
        };
        parent::setUp();
    }

    /**
     * @covers NYPL\Services\JobService::generateJobId()
     */
    public function testIfJobIdIsUnique()
    {
        $fakeService = $this->fakeJobService;
        $uniqueId = $fakeService::generateJobId();

        self::assertNotNull($uniqueId);
    }

    /**
     * @covers NYPL\Services\JobService::generateJobId()
     */
    public function testIfJobIdIsValidUuid()
    {
        $useJobManager = false;
        $fakeService = $this->fakeJobService;
        $uuid = $fakeService::generateJobId($useJobManager);

        self::assertTrue(Uuid::isValid($uuid));
    }

    /**
     * @covers NYPL\Services\JobService::setJobNotice()
     * @covers NYPL\Services\JobService::getJobNotice()
     * @covers NYPL\Services\JobService::buildJobNotice()
     */
    public function testIfJobNoticeWasBuilt()
    {
        $data = ['id' => '1234', 'itemBarcode' => '99999', 'success' => false];
        $notice = 'Job is initializing';

        $fakeService = $this->fakeJobService;
        $fakeService::buildJobNotice($data, $notice);

        self::assertInstanceOf(
            'NYPL\Starter\CacheModel\JobNotice\JobNoticeCreated',
            $fakeService::$jobNotice
        );
        self::assertSame($notice, $fakeService::getJobNotice()->getText());
        self::assertArrayHasKey('itemBarcode', $fakeService::getJobNotice()->getData());
    }

    /**
     * @covers NYPL\Services\JobService::setJobClient()
     * @covers NYPL\Services\JobService::getJobClient()
     * @covers NYPL\Services\JobService::setJobStatus()
     * @covers NYPL\Services\JobService::getJobStatus()
     * @covers NYPL\Services\JobService::beginJob()
     */
    public function testIfJobStarted()
    {
        $data = ['itemBarcode' => '99999', 'jobId' => '8392837129'];
        $refileRequest = new RefileRequest($data);
        $message = 'Job has begun';

        $fakeService = $this->fakeJobService;
        $fakeService::beginJob($refileRequest, $message);

        self::assertSame($message, $fakeService::getJobNotice()->getText());
        self::assertInstanceOf('NYPL\Starter\CacheModel\JobStatus', $fakeService::getJobStatus());
    }

    /**
     * @covers NYPL\Services\JobService::finishJob()
     */
    public function testIfJobFinished()
    {
        $data = ['id' => '555', 'itemBarcode' => '99999', 'jobId' => '8392837129', 'success' => true];
        $refileRequest = new RefileRequest($data);

        $fakeService = $this->fakeJobService;
        $fakeService::finishJob($refileRequest);

        self::assertContains('99999', implode(', ', $fakeService::getJobNotice()->getData()));
        self::assertContains('555', $fakeService::getJobNotice()->getText());

    }
}
